// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ducnguyen96/ducnguyen96.xyz-apis/authservice/ent/schema"
	"github.com/ducnguyen96/ducnguyen96.xyz-apis/authservice/ent/user"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetUsername sets the "username" field.
func (uc *UserCreate) SetUsername(s string) *UserCreate {
	uc.mutation.SetUsername(s)
	return uc
}

// SetAvatar sets the "avatar" field.
func (uc *UserCreate) SetAvatar(s string) *UserCreate {
	uc.mutation.SetAvatar(s)
	return uc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uc *UserCreate) SetNillableAvatar(s *string) *UserCreate {
	if s != nil {
		uc.SetAvatar(*s)
	}
	return uc
}

// SetRemindMe sets the "remind_me" field.
func (uc *UserCreate) SetRemindMe(b bool) *UserCreate {
	uc.mutation.SetRemindMe(b)
	return uc
}

// SetNillableRemindMe sets the "remind_me" field if the given value is not nil.
func (uc *UserCreate) SetNillableRemindMe(b *bool) *UserCreate {
	if b != nil {
		uc.SetRemindMe(*b)
	}
	return uc
}

// SetWakeUpTime sets the "wake_up_time" field.
func (uc *UserCreate) SetWakeUpTime(t time.Time) *UserCreate {
	uc.mutation.SetWakeUpTime(t)
	return uc
}

// SetSleepTime sets the "sleep_time" field.
func (uc *UserCreate) SetSleepTime(t time.Time) *UserCreate {
	uc.mutation.SetSleepTime(t)
	return uc
}

// SetGender sets the "gender" field.
func (uc *UserCreate) SetGender(s schema.Gender) *UserCreate {
	uc.mutation.SetGender(s)
	return uc
}

// SetWeight sets the "weight" field.
func (uc *UserCreate) SetWeight(f float32) *UserCreate {
	uc.mutation.SetWeight(f)
	return uc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (uc *UserCreate) SetNillableWeight(f *float32) *UserCreate {
	if f != nil {
		uc.SetWeight(*f)
	}
	return uc
}

// SetDailyIntake sets the "daily_intake" field.
func (uc *UserCreate) SetDailyIntake(i int32) *UserCreate {
	uc.mutation.SetDailyIntake(i)
	return uc
}

// SetNillableDailyIntake sets the "daily_intake" field if the given value is not nil.
func (uc *UserCreate) SetNillableDailyIntake(i *int32) *UserCreate {
	if i != nil {
		uc.SetDailyIntake(*i)
	}
	return uc
}

// SetContainerImage sets the "container_image" field.
func (uc *UserCreate) SetContainerImage(s string) *UserCreate {
	uc.mutation.SetContainerImage(s)
	return uc
}

// SetNillableContainerImage sets the "container_image" field if the given value is not nil.
func (uc *UserCreate) SetNillableContainerImage(s *string) *UserCreate {
	if s != nil {
		uc.SetContainerImage(*s)
	}
	return uc
}

// SetContainerVolume sets the "container_volume" field.
func (uc *UserCreate) SetContainerVolume(i int32) *UserCreate {
	uc.mutation.SetContainerVolume(i)
	return uc
}

// SetNillableContainerVolume sets the "container_volume" field if the given value is not nil.
func (uc *UserCreate) SetNillableContainerVolume(i *int32) *UserCreate {
	if i != nil {
		uc.SetContainerVolume(*i)
	}
	return uc
}

// SetDrinkAtATime sets the "drink_at_a_time" field.
func (uc *UserCreate) SetDrinkAtATime(i int32) *UserCreate {
	uc.mutation.SetDrinkAtATime(i)
	return uc
}

// SetNillableDrinkAtATime sets the "drink_at_a_time" field if the given value is not nil.
func (uc *UserCreate) SetNillableDrinkAtATime(i *int32) *UserCreate {
	if i != nil {
		uc.SetDrinkAtATime(*i)
	}
	return uc
}

// SetPassword sets the "password" field.
func (uc *UserCreate) SetPassword(s string) *UserCreate {
	uc.mutation.SetPassword(s)
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(u uint64) *UserCreate {
	uc.mutation.SetID(u)
	return uc
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	if err := uc.defaults(); err != nil {
		return nil, err
	}
	if len(uc.hooks) == 0 {
		if err = uc.check(); err != nil {
			return nil, err
		}
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uc.check(); err != nil {
				return nil, err
			}
			uc.mutation = mutation
			if node, err = uc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			if uc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() error {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		if user.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized user.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		if user.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized user.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := user.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.Avatar(); !ok {
		v := user.DefaultAvatar
		uc.mutation.SetAvatar(v)
	}
	if _, ok := uc.mutation.RemindMe(); !ok {
		v := user.DefaultRemindMe
		uc.mutation.SetRemindMe(v)
	}
	if _, ok := uc.mutation.Weight(); !ok {
		v := user.DefaultWeight
		uc.mutation.SetWeight(v)
	}
	if _, ok := uc.mutation.DailyIntake(); !ok {
		v := user.DefaultDailyIntake
		uc.mutation.SetDailyIntake(v)
	}
	if _, ok := uc.mutation.ContainerImage(); !ok {
		v := user.DefaultContainerImage
		uc.mutation.SetContainerImage(v)
	}
	if _, ok := uc.mutation.ContainerVolume(); !ok {
		v := user.DefaultContainerVolume
		uc.mutation.SetContainerVolume(v)
	}
	if _, ok := uc.mutation.DrinkAtATime(); !ok {
		v := user.DefaultDrinkAtATime
		uc.mutation.SetDrinkAtATime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := uc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "username"`)}
	}
	if _, ok := uc.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New(`ent: missing required field "avatar"`)}
	}
	if _, ok := uc.mutation.RemindMe(); !ok {
		return &ValidationError{Name: "remind_me", err: errors.New(`ent: missing required field "remind_me"`)}
	}
	if _, ok := uc.mutation.WakeUpTime(); !ok {
		return &ValidationError{Name: "wake_up_time", err: errors.New(`ent: missing required field "wake_up_time"`)}
	}
	if _, ok := uc.mutation.SleepTime(); !ok {
		return &ValidationError{Name: "sleep_time", err: errors.New(`ent: missing required field "sleep_time"`)}
	}
	if _, ok := uc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "gender"`)}
	}
	if v, ok := uc.mutation.Gender(); ok {
		if err := user.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "gender": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New(`ent: missing required field "weight"`)}
	}
	if _, ok := uc.mutation.DailyIntake(); !ok {
		return &ValidationError{Name: "daily_intake", err: errors.New(`ent: missing required field "daily_intake"`)}
	}
	if _, ok := uc.mutation.ContainerImage(); !ok {
		return &ValidationError{Name: "container_image", err: errors.New(`ent: missing required field "container_image"`)}
	}
	if _, ok := uc.mutation.ContainerVolume(); !ok {
		return &ValidationError{Name: "container_volume", err: errors.New(`ent: missing required field "container_volume"`)}
	}
	if _, ok := uc.mutation.DrinkAtATime(); !ok {
		return &ValidationError{Name: "drink_at_a_time", err: errors.New(`ent: missing required field "drink_at_a_time"`)}
	}
	if _, ok := uc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "password"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: user.FieldID,
			},
		}
	)
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := uc.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUsername,
		})
		_node.Username = value
	}
	if value, ok := uc.mutation.Avatar(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAvatar,
		})
		_node.Avatar = value
	}
	if value, ok := uc.mutation.RemindMe(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldRemindMe,
		})
		_node.RemindMe = value
	}
	if value, ok := uc.mutation.WakeUpTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldWakeUpTime,
		})
		_node.WakeUpTime = value
	}
	if value, ok := uc.mutation.SleepTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldSleepTime,
		})
		_node.SleepTime = value
	}
	if value, ok := uc.mutation.Gender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldGender,
		})
		_node.Gender = value
	}
	if value, ok := uc.mutation.Weight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: user.FieldWeight,
		})
		_node.Weight = value
	}
	if value, ok := uc.mutation.DailyIntake(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: user.FieldDailyIntake,
		})
		_node.DailyIntake = value
	}
	if value, ok := uc.mutation.ContainerImage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldContainerImage,
		})
		_node.ContainerImage = value
	}
	if value, ok := uc.mutation.ContainerVolume(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: user.FieldContainerVolume,
		})
		_node.ContainerVolume = value
	}
	if value, ok := uc.mutation.DrinkAtATime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: user.FieldDrinkAtATime,
		})
		_node.DrinkAtATime = value
	}
	if value, ok := uc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
		_node.Password = value
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
