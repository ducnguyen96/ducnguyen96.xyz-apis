// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ducnguyen96/ducnguyen96.xyz-apis/authservice/ent/schema"
	"github.com/ducnguyen96/ducnguyen96.xyz-apis/authservice/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Avatar holds the value of the "avatar" field.
	Avatar string `json:"avatar,omitempty"`
	// RemindMe holds the value of the "remind_me" field.
	RemindMe bool `json:"remind_me,omitempty"`
	// WakeUpTime holds the value of the "wake_up_time" field.
	WakeUpTime time.Time `json:"wake_up_time,omitempty"`
	// SleepTime holds the value of the "sleep_time" field.
	SleepTime time.Time `json:"sleep_time,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender schema.Gender `json:"gender,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight float32 `json:"weight,omitempty"`
	// DailyIntake holds the value of the "daily_intake" field.
	DailyIntake int32 `json:"daily_intake,omitempty"`
	// ContainerImage holds the value of the "container_image" field.
	ContainerImage string `json:"container_image,omitempty"`
	// ContainerVolume holds the value of the "container_volume" field.
	ContainerVolume int32 `json:"container_volume,omitempty"`
	// DrinkAtATime holds the value of the "drink_at_a_time" field.
	DrinkAtATime int32 `json:"drink_at_a_time,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldGender:
			values[i] = new(schema.Gender)
		case user.FieldRemindMe:
			values[i] = new(sql.NullBool)
		case user.FieldWeight:
			values[i] = new(sql.NullFloat64)
		case user.FieldID, user.FieldDailyIntake, user.FieldContainerVolume, user.FieldDrinkAtATime:
			values[i] = new(sql.NullInt64)
		case user.FieldUsername, user.FieldAvatar, user.FieldContainerImage, user.FieldPassword:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldWakeUpTime, user.FieldSleepTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = uint64(value.Int64)
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				u.Avatar = value.String
			}
		case user.FieldRemindMe:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field remind_me", values[i])
			} else if value.Valid {
				u.RemindMe = value.Bool
			}
		case user.FieldWakeUpTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field wake_up_time", values[i])
			} else if value.Valid {
				u.WakeUpTime = value.Time
			}
		case user.FieldSleepTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sleep_time", values[i])
			} else if value.Valid {
				u.SleepTime = value.Time
			}
		case user.FieldGender:
			if value, ok := values[i].(*schema.Gender); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value != nil {
				u.Gender = *value
			}
		case user.FieldWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				u.Weight = float32(value.Float64)
			}
		case user.FieldDailyIntake:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field daily_intake", values[i])
			} else if value.Valid {
				u.DailyIntake = int32(value.Int64)
			}
		case user.FieldContainerImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field container_image", values[i])
			} else if value.Valid {
				u.ContainerImage = value.String
			}
		case user.FieldContainerVolume:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field container_volume", values[i])
			} else if value.Valid {
				u.ContainerVolume = int32(value.Int64)
			}
		case user.FieldDrinkAtATime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field drink_at_a_time", values[i])
			} else if value.Valid {
				u.DrinkAtATime = int32(value.Int64)
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", username=")
	builder.WriteString(u.Username)
	builder.WriteString(", avatar=")
	builder.WriteString(u.Avatar)
	builder.WriteString(", remind_me=")
	builder.WriteString(fmt.Sprintf("%v", u.RemindMe))
	builder.WriteString(", wake_up_time=")
	builder.WriteString(u.WakeUpTime.Format(time.ANSIC))
	builder.WriteString(", sleep_time=")
	builder.WriteString(u.SleepTime.Format(time.ANSIC))
	builder.WriteString(", gender=")
	builder.WriteString(fmt.Sprintf("%v", u.Gender))
	builder.WriteString(", weight=")
	builder.WriteString(fmt.Sprintf("%v", u.Weight))
	builder.WriteString(", daily_intake=")
	builder.WriteString(fmt.Sprintf("%v", u.DailyIntake))
	builder.WriteString(", container_image=")
	builder.WriteString(u.ContainerImage)
	builder.WriteString(", container_volume=")
	builder.WriteString(fmt.Sprintf("%v", u.ContainerVolume))
	builder.WriteString(", drink_at_a_time=")
	builder.WriteString(fmt.Sprintf("%v", u.DrinkAtATime))
	builder.WriteString(", password=")
	builder.WriteString(u.Password)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
