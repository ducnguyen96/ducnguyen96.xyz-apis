// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/ducnguyen96/ducnguyen96.xyz-apis/authservice/ent/predicate"
	"github.com/ducnguyen96/ducnguyen96.xyz-apis/authservice/ent/schema"
	"github.com/ducnguyen96/ducnguyen96.xyz-apis/authservice/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeUser = "User"
)

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uint64
	created_at          *time.Time
	updated_at          *time.Time
	username            *string
	avatar              *string
	remind_me           *bool
	wake_up_time        *time.Time
	sleep_time          *time.Time
	gender              *schema.Gender
	weight              *float32
	addweight           *float32
	daily_intake        *int32
	adddaily_intake     *int32
	container_image     *string
	container_volume    *int32
	addcontainer_volume *int32
	drink_at_a_time     *int32
	adddrink_at_a_time  *int32
	password            *string
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*User, error)
	predicates          []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uint64) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetAvatar sets the "avatar" field.
func (m *UserMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *UserMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *UserMutation) ResetAvatar() {
	m.avatar = nil
}

// SetRemindMe sets the "remind_me" field.
func (m *UserMutation) SetRemindMe(b bool) {
	m.remind_me = &b
}

// RemindMe returns the value of the "remind_me" field in the mutation.
func (m *UserMutation) RemindMe() (r bool, exists bool) {
	v := m.remind_me
	if v == nil {
		return
	}
	return *v, true
}

// OldRemindMe returns the old "remind_me" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRemindMe(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemindMe is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemindMe requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemindMe: %w", err)
	}
	return oldValue.RemindMe, nil
}

// ResetRemindMe resets all changes to the "remind_me" field.
func (m *UserMutation) ResetRemindMe() {
	m.remind_me = nil
}

// SetWakeUpTime sets the "wake_up_time" field.
func (m *UserMutation) SetWakeUpTime(t time.Time) {
	m.wake_up_time = &t
}

// WakeUpTime returns the value of the "wake_up_time" field in the mutation.
func (m *UserMutation) WakeUpTime() (r time.Time, exists bool) {
	v := m.wake_up_time
	if v == nil {
		return
	}
	return *v, true
}

// OldWakeUpTime returns the old "wake_up_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldWakeUpTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWakeUpTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWakeUpTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWakeUpTime: %w", err)
	}
	return oldValue.WakeUpTime, nil
}

// ResetWakeUpTime resets all changes to the "wake_up_time" field.
func (m *UserMutation) ResetWakeUpTime() {
	m.wake_up_time = nil
}

// SetSleepTime sets the "sleep_time" field.
func (m *UserMutation) SetSleepTime(t time.Time) {
	m.sleep_time = &t
}

// SleepTime returns the value of the "sleep_time" field in the mutation.
func (m *UserMutation) SleepTime() (r time.Time, exists bool) {
	v := m.sleep_time
	if v == nil {
		return
	}
	return *v, true
}

// OldSleepTime returns the old "sleep_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSleepTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSleepTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSleepTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSleepTime: %w", err)
	}
	return oldValue.SleepTime, nil
}

// ResetSleepTime resets all changes to the "sleep_time" field.
func (m *UserMutation) ResetSleepTime() {
	m.sleep_time = nil
}

// SetGender sets the "gender" field.
func (m *UserMutation) SetGender(s schema.Gender) {
	m.gender = &s
}

// Gender returns the value of the "gender" field in the mutation.
func (m *UserMutation) Gender() (r schema.Gender, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGender(ctx context.Context) (v schema.Gender, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ResetGender resets all changes to the "gender" field.
func (m *UserMutation) ResetGender() {
	m.gender = nil
}

// SetWeight sets the "weight" field.
func (m *UserMutation) SetWeight(f float32) {
	m.weight = &f
	m.addweight = nil
}

// Weight returns the value of the "weight" field in the mutation.
func (m *UserMutation) Weight() (r float32, exists bool) {
	v := m.weight
	if v == nil {
		return
	}
	return *v, true
}

// OldWeight returns the old "weight" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldWeight(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeight: %w", err)
	}
	return oldValue.Weight, nil
}

// AddWeight adds f to the "weight" field.
func (m *UserMutation) AddWeight(f float32) {
	if m.addweight != nil {
		*m.addweight += f
	} else {
		m.addweight = &f
	}
}

// AddedWeight returns the value that was added to the "weight" field in this mutation.
func (m *UserMutation) AddedWeight() (r float32, exists bool) {
	v := m.addweight
	if v == nil {
		return
	}
	return *v, true
}

// ResetWeight resets all changes to the "weight" field.
func (m *UserMutation) ResetWeight() {
	m.weight = nil
	m.addweight = nil
}

// SetDailyIntake sets the "daily_intake" field.
func (m *UserMutation) SetDailyIntake(i int32) {
	m.daily_intake = &i
	m.adddaily_intake = nil
}

// DailyIntake returns the value of the "daily_intake" field in the mutation.
func (m *UserMutation) DailyIntake() (r int32, exists bool) {
	v := m.daily_intake
	if v == nil {
		return
	}
	return *v, true
}

// OldDailyIntake returns the old "daily_intake" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDailyIntake(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDailyIntake is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDailyIntake requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDailyIntake: %w", err)
	}
	return oldValue.DailyIntake, nil
}

// AddDailyIntake adds i to the "daily_intake" field.
func (m *UserMutation) AddDailyIntake(i int32) {
	if m.adddaily_intake != nil {
		*m.adddaily_intake += i
	} else {
		m.adddaily_intake = &i
	}
}

// AddedDailyIntake returns the value that was added to the "daily_intake" field in this mutation.
func (m *UserMutation) AddedDailyIntake() (r int32, exists bool) {
	v := m.adddaily_intake
	if v == nil {
		return
	}
	return *v, true
}

// ResetDailyIntake resets all changes to the "daily_intake" field.
func (m *UserMutation) ResetDailyIntake() {
	m.daily_intake = nil
	m.adddaily_intake = nil
}

// SetContainerImage sets the "container_image" field.
func (m *UserMutation) SetContainerImage(s string) {
	m.container_image = &s
}

// ContainerImage returns the value of the "container_image" field in the mutation.
func (m *UserMutation) ContainerImage() (r string, exists bool) {
	v := m.container_image
	if v == nil {
		return
	}
	return *v, true
}

// OldContainerImage returns the old "container_image" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldContainerImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContainerImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContainerImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContainerImage: %w", err)
	}
	return oldValue.ContainerImage, nil
}

// ResetContainerImage resets all changes to the "container_image" field.
func (m *UserMutation) ResetContainerImage() {
	m.container_image = nil
}

// SetContainerVolume sets the "container_volume" field.
func (m *UserMutation) SetContainerVolume(i int32) {
	m.container_volume = &i
	m.addcontainer_volume = nil
}

// ContainerVolume returns the value of the "container_volume" field in the mutation.
func (m *UserMutation) ContainerVolume() (r int32, exists bool) {
	v := m.container_volume
	if v == nil {
		return
	}
	return *v, true
}

// OldContainerVolume returns the old "container_volume" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldContainerVolume(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContainerVolume is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContainerVolume requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContainerVolume: %w", err)
	}
	return oldValue.ContainerVolume, nil
}

// AddContainerVolume adds i to the "container_volume" field.
func (m *UserMutation) AddContainerVolume(i int32) {
	if m.addcontainer_volume != nil {
		*m.addcontainer_volume += i
	} else {
		m.addcontainer_volume = &i
	}
}

// AddedContainerVolume returns the value that was added to the "container_volume" field in this mutation.
func (m *UserMutation) AddedContainerVolume() (r int32, exists bool) {
	v := m.addcontainer_volume
	if v == nil {
		return
	}
	return *v, true
}

// ResetContainerVolume resets all changes to the "container_volume" field.
func (m *UserMutation) ResetContainerVolume() {
	m.container_volume = nil
	m.addcontainer_volume = nil
}

// SetDrinkAtATime sets the "drink_at_a_time" field.
func (m *UserMutation) SetDrinkAtATime(i int32) {
	m.drink_at_a_time = &i
	m.adddrink_at_a_time = nil
}

// DrinkAtATime returns the value of the "drink_at_a_time" field in the mutation.
func (m *UserMutation) DrinkAtATime() (r int32, exists bool) {
	v := m.drink_at_a_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDrinkAtATime returns the old "drink_at_a_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDrinkAtATime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDrinkAtATime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDrinkAtATime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDrinkAtATime: %w", err)
	}
	return oldValue.DrinkAtATime, nil
}

// AddDrinkAtATime adds i to the "drink_at_a_time" field.
func (m *UserMutation) AddDrinkAtATime(i int32) {
	if m.adddrink_at_a_time != nil {
		*m.adddrink_at_a_time += i
	} else {
		m.adddrink_at_a_time = &i
	}
}

// AddedDrinkAtATime returns the value that was added to the "drink_at_a_time" field in this mutation.
func (m *UserMutation) AddedDrinkAtATime() (r int32, exists bool) {
	v := m.adddrink_at_a_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetDrinkAtATime resets all changes to the "drink_at_a_time" field.
func (m *UserMutation) ResetDrinkAtATime() {
	m.drink_at_a_time = nil
	m.adddrink_at_a_time = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.avatar != nil {
		fields = append(fields, user.FieldAvatar)
	}
	if m.remind_me != nil {
		fields = append(fields, user.FieldRemindMe)
	}
	if m.wake_up_time != nil {
		fields = append(fields, user.FieldWakeUpTime)
	}
	if m.sleep_time != nil {
		fields = append(fields, user.FieldSleepTime)
	}
	if m.gender != nil {
		fields = append(fields, user.FieldGender)
	}
	if m.weight != nil {
		fields = append(fields, user.FieldWeight)
	}
	if m.daily_intake != nil {
		fields = append(fields, user.FieldDailyIntake)
	}
	if m.container_image != nil {
		fields = append(fields, user.FieldContainerImage)
	}
	if m.container_volume != nil {
		fields = append(fields, user.FieldContainerVolume)
	}
	if m.drink_at_a_time != nil {
		fields = append(fields, user.FieldDrinkAtATime)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldUsername:
		return m.Username()
	case user.FieldAvatar:
		return m.Avatar()
	case user.FieldRemindMe:
		return m.RemindMe()
	case user.FieldWakeUpTime:
		return m.WakeUpTime()
	case user.FieldSleepTime:
		return m.SleepTime()
	case user.FieldGender:
		return m.Gender()
	case user.FieldWeight:
		return m.Weight()
	case user.FieldDailyIntake:
		return m.DailyIntake()
	case user.FieldContainerImage:
		return m.ContainerImage()
	case user.FieldContainerVolume:
		return m.ContainerVolume()
	case user.FieldDrinkAtATime:
		return m.DrinkAtATime()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldAvatar:
		return m.OldAvatar(ctx)
	case user.FieldRemindMe:
		return m.OldRemindMe(ctx)
	case user.FieldWakeUpTime:
		return m.OldWakeUpTime(ctx)
	case user.FieldSleepTime:
		return m.OldSleepTime(ctx)
	case user.FieldGender:
		return m.OldGender(ctx)
	case user.FieldWeight:
		return m.OldWeight(ctx)
	case user.FieldDailyIntake:
		return m.OldDailyIntake(ctx)
	case user.FieldContainerImage:
		return m.OldContainerImage(ctx)
	case user.FieldContainerVolume:
		return m.OldContainerVolume(ctx)
	case user.FieldDrinkAtATime:
		return m.OldDrinkAtATime(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case user.FieldRemindMe:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemindMe(v)
		return nil
	case user.FieldWakeUpTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWakeUpTime(v)
		return nil
	case user.FieldSleepTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSleepTime(v)
		return nil
	case user.FieldGender:
		v, ok := value.(schema.Gender)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case user.FieldWeight:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeight(v)
		return nil
	case user.FieldDailyIntake:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDailyIntake(v)
		return nil
	case user.FieldContainerImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContainerImage(v)
		return nil
	case user.FieldContainerVolume:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContainerVolume(v)
		return nil
	case user.FieldDrinkAtATime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDrinkAtATime(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addweight != nil {
		fields = append(fields, user.FieldWeight)
	}
	if m.adddaily_intake != nil {
		fields = append(fields, user.FieldDailyIntake)
	}
	if m.addcontainer_volume != nil {
		fields = append(fields, user.FieldContainerVolume)
	}
	if m.adddrink_at_a_time != nil {
		fields = append(fields, user.FieldDrinkAtATime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldWeight:
		return m.AddedWeight()
	case user.FieldDailyIntake:
		return m.AddedDailyIntake()
	case user.FieldContainerVolume:
		return m.AddedContainerVolume()
	case user.FieldDrinkAtATime:
		return m.AddedDrinkAtATime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldWeight:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeight(v)
		return nil
	case user.FieldDailyIntake:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDailyIntake(v)
		return nil
	case user.FieldContainerVolume:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddContainerVolume(v)
		return nil
	case user.FieldDrinkAtATime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDrinkAtATime(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldAvatar:
		m.ResetAvatar()
		return nil
	case user.FieldRemindMe:
		m.ResetRemindMe()
		return nil
	case user.FieldWakeUpTime:
		m.ResetWakeUpTime()
		return nil
	case user.FieldSleepTime:
		m.ResetSleepTime()
		return nil
	case user.FieldGender:
		m.ResetGender()
		return nil
	case user.FieldWeight:
		m.ResetWeight()
		return nil
	case user.FieldDailyIntake:
		m.ResetDailyIntake()
		return nil
	case user.FieldContainerImage:
		m.ResetContainerImage()
		return nil
	case user.FieldContainerVolume:
		m.ResetContainerVolume()
		return nil
	case user.FieldDrinkAtATime:
		m.ResetDrinkAtATime()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
